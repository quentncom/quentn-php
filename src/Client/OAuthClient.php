<?php

namespace Quentn\Client;

use Quentn\Quentn;
use Quentn\Exceptions\QuentnException;
use http\Url;

class OAuthClient extends AbstractQuentnClient {

    //@var string The client ID you received when you first created the application
    protected $clientId;
    //@var Url Indicates the URI to return the user to after authorization is complete. this has to be a url which belongs to one domain registered before.
    protected $redirectUri;
    //@var string Indicates that your server expects to receive an authorization code
    protected $responseType = 'code';
    //@var string the permissions which are demanded by the client
    protected $scope = 'all';
    //@var string The client secret you received when you first created the application
    protected $clientSecret;
    //its refers to the way the application gets an access token
    protected $grantType = 'authorization_code';
    //A random string generated by your application, it will varify later
    protected $state;
    //The Authorization Code is used to exchange an authorization code for an access token.
    protected $code;
    protected $QuentnPhpClient;
    protected $oauthBaseUrl;

    /**
     * QuentnPhpSdkOAuthClient constructor.
     * @param Quentn $client
     */
    public function __construct(Quentn $client) {
        parent::__construct($client);
        $oauth_conf = require_once __DIR__ . './../config.php';
        $this->oauthBaseUrl = $oauth_conf["base_url"];
    }

    /**
     * @param array $config
     */
    public function setApp($config = array()) {


        if (isset($config['client_id'])) {
            $this->clientId = $config['client_id'];
        }
        if (isset($config['redirect_uri'])) {
            $this->redirectUri = $config['redirect_uri'];
        }
        if (isset($config['response_type'])) {
            $this->responseType = $config['response_type'];
        }

        if (isset($config['scope'])) {
            $this->scope = $config['scope'];
        }

        if (isset($config['client_secret'])) {
            $this->clientSecret = $config['client_secret'];
        }

        if (isset($config['grant_type'])) {
            $this->grantType = $config['grant_type'];
        }
    }

    /**
     * Get Authorization link for the user
     *
     * @param string $state A random string generated by your application, which you'll verify later
     * @return Url
     */
    public function getAuthorizationUrl($state = null) {
        if (!$state) {
            if (session_status() == PHP_SESSION_NONE) {
                 session_start();
            }           
            $state = hash('sha256', session_id());
        }

        $params = array(
            'client_id' => $this->clientId,
            'redirect_uri' => $this->redirectUri,
            'response_type' => $this->responseType,
            'scope' => $this->scope,
            'state' => $state
        );
        $url = $this->oauthBaseUrl . '?' . http_build_query($params);
        return $url;
    }

    /**
     * @param string $code  the authorization code
     * @return array it contains api-key and base-url
     */
    public function getAccessToken($code) {
        $params = array(
            'client_id' => $this->clientId,
            'client_secret' => $this->clientSecret,
            'redirect_uri' => $this->redirectUri,
            'code' => $code,
            'grant_type' => $this->grantType,
        );
        return $this->client->callOauth($this->oauthBaseUrl . 'request', json_encode($params));
    }

    /**
     * @param string $state
     * @return bool
     */
    public function authorize($state = null) {
        $return = false;
        if (!$state) {
            $state = hash('sha256', session_id());
        }

        if (isset($_GET["code"]) && isset($_GET["state"]) && $_GET["state"] == $state) {
            $response = $this->getAccessToken($_GET["code"]);

            if (isset($response["base-url"]) && isset($response["api-key"])) {
                $this->client->setBaseUrl($response["base-url"]);
                $this->client->setApiKey($response["api-key"]);
                $return = true;
            }
        }
        return $return;
    }

}
